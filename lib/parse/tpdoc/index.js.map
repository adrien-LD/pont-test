{"version":3,"sources":["../../../src/parse/tpdoc/index.js"],"names":["parameter2requestInfo","parameters","headers","body","params","forEach","item","entityName","type","name","comment","annotation","required","info","description","push","parseInterfaceReal","api","defObject","code","funDesc","methods","paths","response","requestParams","method","length","codeList","split","funName","path","funParams","map","paramItem","paramsReturnLead","leadDoc","typedefNameList","depadences","parseInterface","interfaceInfos","result","getAllInterfaceInfoList","chapters","section","sections","apis","concat","tpdocParse","data","artifact","entities","interfaceList","basePath"],"mappings":"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","sourcesContent":["import { definitionsParse, translateType } from './definitions';\nimport jsdocParse from './jsdocParse';\n\nfunction parameter2requestInfo(parameters) {\n  const headers = [];\n  const body = [];\n  const params = [];\n\n  parameters.forEach((item) => {\n    const {\n      entityName: type, name, comment, annotation, required,\n    } = item;\n\n    const info = {\n      name,\n      description: comment,\n      required,\n      type: translateType(type).type,\n    };\n    switch (annotation) {\n      case '@RequestHeader':\n        headers.push(info);\n        break;\n      case '@RequestBody':\n        body.push(info);\n        break;\n      case '@RequestParam':\n        params.push(info);\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  return {\n    headers,\n    body,\n    params,\n  };\n}\n\nfunction parseInterfaceReal(api = {}, defObject) {\n  const {\n    code,\n    name: funDesc,\n    methods = [],\n    paths = [],\n    response,\n    requestParams = [],\n  } = api;\n\n  const method = methods.length ? methods[0] : 'GET';\n  const codeList = code.split('\\.');\n  const funName = codeList[codeList.length - 1];\n  const path = paths.length ? paths[0] : '';\n\n  const funParams = requestParams.map((paramItem) => ({\n    name: paramItem.name,\n    required: paramItem.required,\n  }));\n\n  const {\n    paramsReturnLead: leadDoc,\n    typedefNameList: depadences,\n  } = jsdocParse(funDesc, requestParams, response, defObject);\n\n  // 获取headers,body,params\n  const {\n    headers,\n    body,\n    params,\n  } = parameter2requestInfo(requestParams);\n\n  return {\n    headers,\n    body,\n    params,\n    funParams,\n    leadDoc,\n    funName,\n    funDesc,\n    method,\n    path,\n    depadences,\n  };\n}\n\nfunction parseInterface(interfaceInfos = [], defObject) {\n  const result = [];\n  interfaceInfos.forEach((api) => {\n    result.push(parseInterfaceReal(api, defObject));\n  });\n  return result;\n}\n\nfunction getAllInterfaceInfoList(chapters = []) {\n  let result = [];\n  chapters.forEach((section) => {\n    const {\n      sections,\n      apis,\n    } = section;\n    if (sections) {\n      result = result.concat(getAllInterfaceInfoList(sections));\n    }\n    if (apis) {\n      result = result.concat(apis);\n    }\n  });\n\n  return result;\n}\n\n/**\n * tp-doc接口解析\n * @param {object} data 请求接口后的参数\n * @returns {import(\"..\").ParseInfo}\n */\nexport default function tpdocParse(data = {}) {\n  const {\n    artifact,\n    chapters,\n    entities,\n  } = data;\n\n  const defObject = definitionsParse(entities);\n\n  const interfaceInfos = getAllInterfaceInfoList(chapters);\n  const interfaceList = parseInterface(interfaceInfos, defObject);\n\n  return {\n    basePath: '/',\n    interfaceList,\n    defObject,\n  };\n}\n"],"file":"index.js"}