{"version":3,"sources":["../../../src/parse/swagger/index.js"],"names":["parameter2requestInfo","parameters","headers","body","params","forEach","item","in","place","push","funParseReal","method","path","defObject","summary","funDesc","operationId","funName","consumes","responses","paramsReturnLead","leadDoc","typedefNameList","depadences","funParams","map","paramItem","name","type","required","funParse","pathItem","result","get","post","delete","update","swagger2Parse","data","basePath","paths","definitions","interfaceList","hasOwnProperty","concat"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;AACA;AACA;AACA;AACA,SAASA,qBAAT,CAA+BC,UAA/B,EAA2C;AACzC,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,IAAI,GAAG,EAAb;AACA,QAAMC,MAAM,GAAG,EAAf;AAEAH,EAAAA,UAAU,CAACI,OAAX,CAAoBC,IAAD,IAAU;AAC3B,UAAM;AACJC,MAAAA,EAAE,EAAEC;AADA,QAEFF,IAFJ;;AAGA,YAAQE,KAAR;AACE,WAAK,QAAL;AACEN,QAAAA,OAAO,CAACO,IAAR,CAAaH,IAAb;AACA;;AACF,WAAK,MAAL;AACEH,QAAAA,IAAI,CAACM,IAAL,CAAUH,IAAV;AACA;;AACF,WAAK,OAAL;AACEF,QAAAA,MAAM,CAACK,IAAP,CAAYH,IAAZ;AACA;;AAEF;AACE;AAZJ;AAcD,GAlBD;AAoBA,SAAO;AACLJ,IAAAA,OADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCN,IAApC,EAA0CO,SAA1C,EAAqD;AACnD,QAAM;AACJC,IAAAA,OAAO,EAAEC,OADL;AAEJC,IAAAA,WAAW,EAAEC,OAFT;AAGJC,IAAAA,QAHI;AAIJjB,IAAAA,UAAU,GAAG,EAJT;AAKJkB,IAAAA;AALI,MAMFb,IANJ,CADmD,CASnD;;AACA,QAAM;AAAEc,IAAAA,gBAAgB,EAAEC,OAApB;AAA6BC,IAAAA,eAAe,EAAEC;AAA9C,MAA6D,yBAAWR,OAAX,EAAoBd,UAApB,EAAgCkB,SAAhC,EAA2CN,SAA3C,CAAnE,CAVmD,CAYnD;;AACA,QAAMW,SAAS,GAAGvB,UAAU,CAACwB,GAAX,CAAgBC,SAAD,KAAgB;AAC/CC,IAAAA,IAAI,EAAED,SAAS,CAACC,IAD+B;AAE/CC,IAAAA,IAAI,EAAEF,SAAS,CAACE,IAF+B;AAG/CC,IAAAA,QAAQ,EAAEH,SAAS,CAACG;AAH2B,GAAhB,CAAf,CAAlB,CAbmD,CAmBnD;;AACA,QAAM;AACJ3B,IAAAA,OADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA;AAHI,MAIFJ,qBAAqB,CAACC,UAAD,CAJzB;AAMA,SAAO;AACLC,IAAAA,OADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA,MAHK;AAILoB,IAAAA,SAJK;AAKLH,IAAAA,OALK;AAMLJ,IAAAA,OANK;AAOLF,IAAAA,OAPK;AAQLG,IAAAA,QARK;AASLP,IAAAA,MATK;AAULC,IAAAA,IAVK;AAWLW,IAAAA;AAXK,GAAP;AAaD;;AAED,SAASO,QAAT,CAAkBlB,IAAlB,EAAwBmB,QAAxB,EAAkClB,SAAlC,EAA6C;AAC3C,QAAMmB,MAAM,GAAG,EAAf;;AACA,MAAID,QAAQ,CAACE,GAAb,EAAkB;AAChBD,IAAAA,MAAM,CAACvB,IAAP,CAAYC,YAAY,CAAC,KAAD,EAAQE,IAAR,EAAcmB,QAAQ,CAACE,GAAvB,EAA4BpB,SAA5B,CAAxB;AACD;;AACD,MAAIkB,QAAQ,CAACG,IAAb,EAAmB;AACjBF,IAAAA,MAAM,CAACvB,IAAP,CAAYC,YAAY,CAAC,MAAD,EAASE,IAAT,EAAemB,QAAQ,CAACG,IAAxB,EAA8BrB,SAA9B,CAAxB;AACD;;AACD,MAAIkB,QAAQ,CAACI,MAAb,EAAqB;AACnBH,IAAAA,MAAM,CAACvB,IAAP,CAAYC,YAAY,CAAC,QAAD,EAAWE,IAAX,EAAiBmB,QAAQ,CAACI,MAA1B,EAAkCtB,SAAlC,CAAxB;AACD;;AACD,MAAIkB,QAAQ,CAACK,MAAb,EAAqB;AACnBJ,IAAAA,MAAM,CAACvB,IAAP,CAAYC,YAAY,CAAC,QAAD,EAAWE,IAAX,EAAiBmB,QAAQ,CAACK,MAA1B,EAAkCvB,SAAlC,CAAxB;AACD;;AAED,SAAOmB,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACe,SAASK,aAAT,CAAuBC,IAAvB,EAA6B;AAC1C,MAAI,CAACA,IAAL,EAAW;AAEX,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,KAAK,GAAG,EAFJ;AAGJC,IAAAA;AAHI,MAIFH,IAJJ;AAMA,MAAII,aAAa,GAAG,EAApB,CAT0C,CAW1C;;AACA,QAAM7B,SAAS,GAAG,0BAAiB4B,WAAjB,CAAlB;;AAEA,OAAK,MAAM7B,IAAX,IAAmB4B,KAAnB,EAA0B;AACxB,QAAIA,KAAK,CAACG,cAAN,CAAqB/B,IAArB,CAAJ,EAAgC;AAC9B,YAAMmB,QAAQ,GAAGS,KAAK,CAAC5B,IAAD,CAAtB;AACA8B,MAAAA,aAAa,GAAGA,aAAa,CAACE,MAAd,CAAqBd,QAAQ,CAAClB,IAAD,EAAOmB,QAAP,EAAiBlB,SAAjB,CAA7B,CAAhB;AACD;AACF;;AAED,SAAO;AACL0B,IAAAA,QADK;AAELG,IAAAA,aAFK;AAGL7B,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import jsdocParse from './jsdocParse';\nimport definitionsParse from './definitions';\n/**\n * 参数列表解析出请求所需的信息\n * @param {Object[]} parameters 参数列表\n */\nfunction parameter2requestInfo(parameters) {\n  const headers = [];\n  const body = [];\n  const params = [];\n\n  parameters.forEach((item) => {\n    const {\n      in: place,\n    } = item;\n    switch (place) {\n      case 'header':\n        headers.push(item);\n        break;\n      case 'body':\n        body.push(item);\n        break;\n      case 'query':\n        params.push(item);\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  return {\n    headers,\n    body,\n    params,\n  };\n}\n\n/**\n * 解析方法(真)\n * @param {string} method 方法类型\n * @param {string} path 路径\n * @param {Object} item 接口信息\n * @param {Object} defObject 类型定义\n */\nfunction funParseReal(method, path, item, defObject) {\n  const {\n    summary: funDesc,\n    operationId: funName,\n    consumes,\n    parameters = [],\n    responses,\n  } = item;\n\n  // 解析出jsdoc\n  const { paramsReturnLead: leadDoc, typedefNameList: depadences } = jsdocParse(funDesc, parameters, responses, defObject);\n\n  // 转换params\n  const funParams = parameters.map((paramItem) => ({\n    name: paramItem.name,\n    type: paramItem.type,\n    required: paramItem.required,\n  }));\n\n  // 获取headers,body,params\n  const {\n    headers,\n    body,\n    params,\n  } = parameter2requestInfo(parameters);\n\n  return {\n    headers,\n    body,\n    params,\n    funParams,\n    leadDoc,\n    funName,\n    funDesc,\n    consumes,\n    method,\n    path,\n    depadences,\n  };\n}\n\nfunction funParse(path, pathItem, defObject) {\n  const result = [];\n  if (pathItem.get) {\n    result.push(funParseReal('GET', path, pathItem.get, defObject));\n  }\n  if (pathItem.post) {\n    result.push(funParseReal('POST', path, pathItem.post, defObject));\n  }\n  if (pathItem.delete) {\n    result.push(funParseReal('DELETE', path, pathItem.delete, defObject));\n  }\n  if (pathItem.update) {\n    result.push(funParseReal('UPDATE', path, pathItem.update, defObject));\n  }\n\n  return result;\n}\n\n/**\n * swagger2.0版本接口解析\n * @param {object} data 请求接口后的参数\n * @returns {import(\"..\").ParseInfo}\n */\nexport default function swagger2Parse(data) {\n  if (!data) return;\n\n  const {\n    basePath,\n    paths = {},\n    definitions,\n  } = data;\n\n  let interfaceList = [];\n\n  // 解析typedef\n  const defObject = definitionsParse(definitions);\n\n  for (const path in paths) {\n    if (paths.hasOwnProperty(path)) {\n      const pathItem = paths[path];\n      interfaceList = interfaceList.concat(funParse(path, pathItem, defObject));\n    }\n  }\n\n  return {\n    basePath,\n    interfaceList,\n    defObject,\n  };\n}\n"],"file":"index.js"}