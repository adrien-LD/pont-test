{"version":3,"sources":["../../../src/parse/swagger/jsdocParse.js"],"names":["translateType","type","typeReal","trim","toLowerCase","deepStringify","refs","defObject","exist","result","forEach","ref","def","push","dependenceList","concat","getParamsReturnLead","funDesc","parameters","responses","parameDocList","item","schema","$ref","refSplitList","split","refStr","length","replace","paramStr","name","description","returnInfo","returnType","returnRefSplitList","returnRefStr","typedefNameList","paramsReturnLead","join","jsdocParse"],"mappings":"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","sourcesContent":["function translateType(type) {\n  if (!type) return 'any';\n  const typeReal = type.trim().toLowerCase();\n  switch (typeReal) {\n    case 'integer':\n    case 'float':\n    case 'double':\n      return 'number';\n    default:\n      break;\n  }\n  return type;\n}\n\nfunction deepStringify(refs, defObject, exist = {}) {\n  let result = [];\n  refs.forEach((ref) => {\n    if (!exist[ref]) {\n      const def = defObject[ref];\n      exist[ref] = true;\n      if (def) {\n        result.push(ref);\n        result = deepStringify(def.dependenceList, defObject, exist).concat(result);\n      }\n    }\n  });\n  return result;\n}\n\nfunction getParamsReturnLead(funDesc = '', parameters = [], responses, defObject) {\n  const parameDocList = [];\n  const refs = [];\n\n  // 参数jsdoc解析\n  parameters.forEach((item) => {\n    let type = 'any';\n    if (item.type) {\n      type = translateType(item.type);\n    } else if (item.schema) {\n      if (item.schema.type) {\n        type = translateType(item.schema.type);\n      } else if (item.schema.$ref) {\n        const refSplitList = item.schema.$ref.split('/');\n        const refStr = refSplitList[refSplitList.length - 1];\n        type = refStr.replace(/[«|»|,]/g, '_');\n        refs.push(type);\n      }\n    }\n    const paramStr = ` * @param {${type}} ${item.name.replace(/-/g, '')} ${item.description}`;\n    parameDocList.push(paramStr);\n  });\n\n  // 返回的字符串\n  const returnInfo = responses['200'];\n  let returnType = 'any';\n  if (returnInfo.type) {\n    returnType = translateType(returnInfo.type);\n  } else if (returnInfo.schema) {\n    if (returnInfo.schema.type) {\n      returnType = translateType(returnInfo.schema.type);\n    } else if (returnInfo.schema.$ref) {\n      const returnRefSplitList = returnInfo.schema.$ref.split('/');\n      const returnRefStr = returnRefSplitList[returnRefSplitList.length - 1];\n      returnType = returnRefStr.replace(/[«|»|,]/g, '_');\n      refs.push(returnType);\n    }\n  }\n\n  // 被引用的typedef\n  const typedefNameList = deepStringify(refs, defObject);\n\n  const paramsReturnLead = `\n/**\n * ${funDesc}\n${parameDocList.join('\\n')}\n * @returns {Promise<${returnType}>}\n */`;\n\n  return { paramsReturnLead, typedefNameList };\n}\n\n/**\n * 名字\n * @param {*} funDesc 方法描述\n * @param {*} parameters 方法参数信息\n * @param {*} responses 方法返回结果\n * @param {*} defObject typedef的固定结构内容\n */\nexport default function jsdocParse(funDesc, parameters, responses, defObject) {\n  // TODO {yzy} 解决map list等类型的问题 解决根据当前已有的typedef再来生成typedef的问题\n  const { paramsReturnLead, typedefNameList } = getParamsReturnLead(funDesc, parameters, responses, defObject);\n  return { paramsReturnLead, typedefNameList };\n}\n"],"file":"jsdocParse.js"}