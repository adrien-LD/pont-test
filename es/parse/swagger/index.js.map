{"version":3,"sources":["../../../src/parse/swagger/index.js"],"names":["jsdocParse","definitionsParse","parameter2requestInfo","parameters","headers","body","params","forEach","item","place","in","push","funParseReal","method","path","defObject","funDesc","summary","funName","operationId","consumes","responses","leadDoc","paramsReturnLead","depadences","typedefNameList","funParams","map","paramItem","name","type","required","funParse","pathItem","result","get","post","delete","update","swagger2Parse","data","basePath","paths","definitions","interfaceList","hasOwnProperty","concat"],"mappings":"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","sourcesContent":["import jsdocParse from './jsdocParse';\nimport definitionsParse from './definitions';\n/**\n * 参数列表解析出请求所需的信息\n * @param {Object[]} parameters 参数列表\n */\nfunction parameter2requestInfo(parameters) {\n  const headers = [];\n  const body = [];\n  const params = [];\n\n  parameters.forEach((item) => {\n    const {\n      in: place,\n    } = item;\n    switch (place) {\n      case 'header':\n        headers.push(item);\n        break;\n      case 'body':\n        body.push(item);\n        break;\n      case 'query':\n        params.push(item);\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  return {\n    headers,\n    body,\n    params,\n  };\n}\n\n/**\n * 解析方法(真)\n * @param {string} method 方法类型\n * @param {string} path 路径\n * @param {Object} item 接口信息\n * @param {Object} defObject 类型定义\n */\nfunction funParseReal(method, path, item, defObject) {\n  const {\n    summary: funDesc,\n    operationId: funName,\n    consumes,\n    parameters = [],\n    responses,\n  } = item;\n\n  // 解析出jsdoc\n  const { paramsReturnLead: leadDoc, typedefNameList: depadences } = jsdocParse(funDesc, parameters, responses, defObject);\n\n  // 转换params\n  const funParams = parameters.map((paramItem) => ({\n    name: paramItem.name,\n    type: paramItem.type,\n    required: paramItem.required,\n  }));\n\n  // 获取headers,body,params\n  const {\n    headers,\n    body,\n    params,\n  } = parameter2requestInfo(parameters);\n\n  return {\n    headers,\n    body,\n    params,\n    funParams,\n    leadDoc,\n    funName,\n    funDesc,\n    consumes,\n    method,\n    path,\n    depadences,\n  };\n}\n\nfunction funParse(path, pathItem, defObject) {\n  const result = [];\n  if (pathItem.get) {\n    result.push(funParseReal('GET', path, pathItem.get, defObject));\n  }\n  if (pathItem.post) {\n    result.push(funParseReal('POST', path, pathItem.post, defObject));\n  }\n  if (pathItem.delete) {\n    result.push(funParseReal('DELETE', path, pathItem.delete, defObject));\n  }\n  if (pathItem.update) {\n    result.push(funParseReal('UPDATE', path, pathItem.update, defObject));\n  }\n\n  return result;\n}\n\n/**\n * swagger2.0版本接口解析\n * @param {object} data 请求接口后的参数\n * @returns {import(\"..\").ParseInfo}\n */\nexport default function swagger2Parse(data) {\n  if (!data) return;\n\n  const {\n    basePath,\n    paths = {},\n    definitions,\n  } = data;\n\n  let interfaceList = [];\n\n  // 解析typedef\n  const defObject = definitionsParse(definitions);\n\n  for (const path in paths) {\n    if (paths.hasOwnProperty(path)) {\n      const pathItem = paths[path];\n      interfaceList = interfaceList.concat(funParse(path, pathItem, defObject));\n    }\n  }\n\n  return {\n    basePath,\n    interfaceList,\n    defObject,\n  };\n}\n"],"file":"index.js"}